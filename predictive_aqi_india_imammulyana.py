# -*- coding: utf-8 -*-
"""Predictive_AQI_India_ImamMulyana.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1wa1lzdta9agu69WGXxYHdpgxPdZTgmob

# Business Understanding

Peningkatan urbanisasi dan aktivitas industri di wilayah metropolitan serta pembakaran liar diberbagai daerah telah menyebabkan perhatian yang meningkat terhadap kualitas udara. Kondisi ini memunculkan kekhawatiran tentang dampak kesehatan masyarakat, mengingat bahwa paparan terus-menerus terhadap polutan udara dapat menyebabkan berbagai masalah kesehatan, termasuk penyakit pernapasan dan kardiovaskular.

Dalam beberapa tahun terakhir, laporan kualitas udara menunjukkan peningkatan kadar polutan di beberapa wilayah metropolitan. Pemerintah daerah dan masyarakat perlu memiliki pemahaman yang lebih baik tentang tren kualitas udara, serta sistem yang dapat memberikan peringatan dini jika ada potensi risiko kesehatan.

Selain itu, perusahaan industri juga dihadapkan pada tanggung jawab untuk mengelola dampak lingkungan dari operasional mereka. Memahami dan mengukur dampak polusi udara dari kegiatan industri menjadi krusial untuk mengambil langkah-langkah proaktif dalam melindungi lingkungan dan kesehatan masyarakat.

Oleh karena itu, perlu dikembangkan suatu sistem yang dapat memprediksi kualitas udara dengan akurat, memberikan pemantauan secara real-time, dan memberikan informasi yang dapat diakses oleh pemerintah, industri, dan masyarakat umum. Dengan demikian, proyek ini bertujuan untuk mengatasi kekurangan tersebut dan memberikan solusi yang efektif dalam mengelola kualitas udara di wilayah metropolitan khususnya negara India.

# Data Understanding
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

# from google.colab import drive
# drive.mount('/content/drive/')

#  Loading Data

path = "/content/air_pollution_data.csv"
load_data = pd.read_csv(path)

# Membuat data frame

df = pd.DataFrame(load_data)
df.head()

# Mendrop kolom no dan nh3, karena dalam index AQI india data no tidak digunakan & nh3 tidak tersedia pada data uji coba pada tahap selanjutnya

df_new = df.drop(['no','nh3'], axis= 1)
df = df_new

df.info()

# data dibagi 10 agar menyesuaikan dengan satuan index AQI India yang menggunakan miligram bukan mikrogram

dfx = df[['aqi','co',		'no2',	'o3',	'so2',	'pm2_5',	'pm10']]/10
dfx.head()

# cek isi data
dfx.describe()

# cek null
dfx.isnull().sum()

# Mengecek jumlah kandungan o3 yang bernilai 0

o3 = (dfx.o3 == 0).sum()
print("Nilai 0 di kolom o3 ada: ", o3)

# Drop baris dengan nilai 'o3' = 0
dfx = dfx.loc[(dfx[['o3']]!=0).all(axis=1)]

# Cek ukuran data untuk memastikan baris sudah di-drop
dfx.shape

# cek isi data
dfx.describe()

# mengecek sebaran aqi berdasarkan kategorinya

df['aqi'].value_counts()

# mengecek sebaran city

df['city'].value_counts()

# cek korelasi
f,ax= plt.subplots(figsize=(15,10))
sns.heatmap(dfx.astype(float).corr(), linewidth=0.25, vmax=1.0, square=True, cmap="coolwarm", linecolor='black', annot=True)

# cek outlier

sns.boxplot(x='variable', y='value', data=pd.melt(dfx))
plt.show()

# IQR

Q1 = dfx.quantile(0.25)
Q3 = dfx.quantile(0.75)
IQR=Q3-Q1
dfx=dfx[~((dfx<(Q1-1.5*IQR))|(dfx>(Q3+1.5*IQR))).any(axis=1)]

# Cek ukuran dataset setelah kita drop outliers
dfx.shape

# melihat nilai distribusi

df.hist(bins=50, figsize=(20,15))
plt.show()

# Mengamati hubungan antar fitur

sns.pairplot(dfx, diag_kind = 'kde')

# pesrebaran AQI dengan pie chart

default_counts = df['aqi'].value_counts()
plt.figure(figsize=(6, 6))
plt.pie(default_counts, labels=default_counts.index, autopct='%1.1f%%', startangle=90)
plt.title("Pie Chart of AQI")
plt.show()

# cek hubungan co & pm10 disetiap kota

scatplot = sns.FacetGrid(df, col='city', hue='aqi')
scatplot.map(plt.scatter, 'co', 'pm10', alpha=.7)
scatplot.add_legend()

# cek hubungan co & pm2_5 disetiap kota

scatplot = sns.FacetGrid(df, col='city', hue='aqi')
scatplot.map(plt.scatter, 'co', 'pm2_5', alpha=.7)
scatplot.add_legend()

# cek hubungan co & pm10 secara keseluruhan

import plotly.express as px
fig = px.scatter(df, x="co", y="pm10", color="aqi",
                size="aqi", hover_data=['city']
)
fig.show()

# cek hubungan co & pm2_5 secara keseluruhan

import plotly.express as px
fig = px.scatter(df, x="co", y="pm2_5", color="aqi",
                size="aqi", hover_data=['city']
)
fig.show()

"""# Data Preparation"""

from sklearn.model_selection import train_test_split
from sklearn import metrics

# Input Variabel
x=df[['co','no2','o3','so2','pm2_5','pm10']]/10

# Target Variabel
y=df['aqi'].astype('category')

# Split: Training 90% & Testing 10%

x_train, x_test, y_train, y_test = train_test_split(x,y, test_size=0.1, random_state=42)

"""# Modeling: Decision Tree"""

from sklearn.tree import DecisionTreeClassifier

# Object Decision tree
clf = DecisionTreeClassifier()

# Train Model
model_clf = clf.fit(
    x_train,
    y_train
)
# Prediksi
y_pred_clf = model_clf.predict(x_test)

"""# Evaluasi Model : Decisiom Tree"""

#Evaluation Model

from sklearn.metrics import accuracy_score
from sklearn.metrics import classification_report
from sklearn.metrics import precision_score, recall_score
from sklearn.metrics import confusion_matrix

# evaluasi Klasifikasi
print(classification_report(y_test,y_pred_clf))

# Memvisualisasikan Confusion Matrix

mat=confusion_matrix(y_test,y_pred_clf)
sns.heatmap(mat.T, square=True, annot=True, fmt='d', cbar=False)
plt.xlabel('True Label')
plt.ylabel('Predict Label')

# Signifikan factor model

feat_importances = pd.Series(model_clf.feature_importances_,index=x.columns)
feat_importances.nlargest(10).plot(kind='barh')

"""# Modeling: Random Forest"""

from sklearn.ensemble import RandomForestClassifier
from sklearn.preprocessing import LabelEncoder
from sklearn.preprocessing import StandardScaler

# Object Random forest
rf = RandomForestClassifier(
    n_estimators=200,
    max_depth=6,
    max_leaf_nodes= 10
)

# Train Model
model_rf = rf.fit(
    x_train,
    y_train
)
# Prediksi
y_pred_rf = model_rf.predict(x_test)

"""# Evaluasi Model : Random Forest"""

# evaluasi Random forest
print(classification_report(y_test,y_pred_rf))

# Memvisualisasikan Confusion Matrix Random Forest

mat=confusion_matrix(y_test,y_pred_rf)
sns.heatmap(mat.T, square=True, annot=True, fmt='d', cbar=False)
plt.xlabel('True Label')
plt.ylabel('Predict Label')

# Signifikan factor model

feat_importances = pd.Series(model_rf.feature_importances_,index=x.columns)
feat_importances.nlargest(10).plot(kind='barh')

"""# Apply Random Forest to Delhi AQI"""

# Data Ujicoba

path2 = "/content/NewDelhi_Air_quality (1).csv"
load_data2 = pd.read_csv(path2, delimiter=',')

df_ex=pd.DataFrame(load_data2)
df_ex.head()

# Rename, menyesuaikan dengan nama kolom data sebelumnya

df_ex.rename(columns={"CO": "co", "pm25": "pm2_5"}, inplace=True)

# drop kolom tidak perlu pada data uji coba

df_new2 = df_ex.drop(['AQI', 'datetime','timestamp_local','timestamp_utc','ts'], axis= 1)
df_ex = df_new2

df_ex.info()

# Input Varibel
x1= df_ex[['co','no2','o3','so2','pm2_5','pm10']]/10

# melakukan prediksi

y_predict_ex = model_rf.predict(x1)
y_predict_ex

# Mengubah hasil pemodelan yg berbentuk array menjadi Data Frame

df_y_predict_ex = pd.DataFrame({'Prediction_AQI':y_predict_ex}).round(2)

df_y_predict_ex

# Menggabungkan dataset Delhi AQI dan hasil predictnya

df_hasil_predict_rf=pd.concat([df_ex,df_y_predict_ex], sort=False, axis=1)
df_hasil_predict_rf.head()

# Hasil prediksi berdasarkan kategori AQI

df_hasil_predict_rf['Prediction_AQI'].value_counts()

dfz = df_hasil_predict_rf
hasil1 = dfz[dfz['Prediction_AQI'] == 1]
hasil2 = dfz[dfz['Prediction_AQI'] == 2]

hasil1.describe()

hasil2.describe()